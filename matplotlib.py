# -*- coding: utf-8 -*-
"""matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HpF-dc-Qj8dgkzA9_2PfU5-50NmnmZSl

This code creates a simple line chart with sample data. The chart is customized by setting the labels for the x and y axes, the title of the chart, the color and style of the line and markers, and the appearance of the grid. You can adjust the properties like color, linewidth, markersize, label and title etc to customize the chart as per your requirement.
"""

import matplotlib.pyplot as plt

# Sample data
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

# Create the figure and axes objects
fig, ax = plt.subplots()

# Plot the data
ax.plot(x, y, 'o-', color='blue', linewidth=2, markersize=10)

# Customize the x and y axis labels
ax.set_xlabel('Stuff along the X')
ax.set_ylabel('Things along the Y')

# Customize the title
ax.set_title('Customized Chart')

# Customize the grid
ax.grid(True, linestyle='--', color='gray', alpha=0.7)

# Show the plot
plt.show()

"""This code creates a 2x2 grid of subplots. The top left subplot shows a line plot of the sin(x) and cos(x) functions, the top right subplot shows a scatter plot of the same data, the bottom left subplot shows a bar plot and the bottom right subplot shows a histogram of the same data.
It also shows the title, legend and x and y axis labels of each plot. You can experiment with different plot types and customize them
"""

import matplotlib.pyplot as plt
import numpy as np

# Sample data
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Create the figure and axes objects
fig, axs = plt.subplots(2, 2)

#Line plot
axs[0, 0].plot(x, y1, '-', color='blue', label='sin(x)')
axs[0, 0].plot(x, y2, '-', color='red', label='cos(x)')
axs[0, 0].set_title('Line Plot')
axs[0, 0].legend(loc="best")

#Scatter plot
axs[0, 1].scatter(x, y1, color='blue', label='sin(x)')
axs[0, 1].scatter(x, y2, color='red', label='cos(x)')
axs[0, 1].set_title('Scatter Plot')
axs[0, 1].legend(loc="best")

#Bar plot
axs[1, 0].bar(x, y1, color='blue', label='sin(x)')
axs[1, 0].bar(x, y2, color='red', label='cos(x)')
axs[1, 0].set_title('Bar Plot')
axs[1, 0].legend(loc="best")

#Histogram plot
axs[1, 1].hist(y1, bins=20, color='blue', histtype='bar', label='sin(x)')
axs[1, 1].hist(y2, bins=20, color='red', histtype='bar', label='cos(x)')
axs[1, 1].set_title('Histogram Plot')
axs[1, 1].legend(loc="best")

plt.tight_layout()
plt.show()

"""This code creates a simple line chart of the sine function and uses the annotate function to add annotations for the maximum and minimum values of the function. The annotate function takes a string, the coordinates of the point to annotate, the coordinates of the text, and a dictionary of arrow properties. The arrow properties are used to specify the color and size of the arrow that points from the text to the point on the chart. You can also adjust the text position and the arrow properties to customize the annotation"""

import matplotlib.pyplot as plt
import numpy as np

# Sample data
x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

# Create the figure and axes objects
fig, ax = plt.subplots()

# Plot the data
ax.plot(x, y, '-', color='blue')

# Annotate the maximum value
max_val = max(y)
max_ind = np.argmax(y)
ax.annotate(f'Max: {max_val:.2f}', xy=(x[max_ind], max_val), xytext=(x[max_ind]+0.1, max_val+0.2),
            arrowprops=dict(facecolor='red', shrink=0.05))

# Annotate the minimum value
min_val = min(y)
min_ind = np.argmin(y)
ax.annotate(f'Min: {min_val:.2f}', xy=(x[min_ind], min_val), xytext=(x[min_ind]-0.3, min_val-0.2),
            arrowprops=dict(facecolor='green', shrink=0.05))

# Customize the x and y axis labels
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')

# Show the plot
plt.show()

"""This code creates a simple bar chart of the income by name using the plot function of the dataframe. The plot function takes a few parameters such as the kind of plot, the column for the x-axis and the column for the y-axis.
The xlabel, ylabel, and title functions are used to add labels and title to the chart.

You can also use the plot function to create other types of visualizations like line chart, scatter plot, histogram etc. For example, you can use kind='line' or kind='scatter' or kind='hist' to create line chart, scatter plot and histogram respectively. You can also customize the chart by passing the additional parameters such as color, style, and markers etc.
"""

import matplotlib.pyplot as plt
import pandas as pd

# Create a sample dataframe
data = {'name': ['John', 'Jane', 'Mike', 'Emily', 'Adam'],
        'age': [35, 28, 32, 42, 25],
        'income': [50000, 60000, 55000, 70000, 35000]}
df = pd.DataFrame(data)

# Use the 'plot' function of the dataframe to create a bar chart
df.plot(kind='bar', x='name', y='income', color='blue')

# Add labels and title
plt.xlabel('Name')
plt.ylabel('Income')
plt.title('Income by Name')

# Show the plot
plt.show()

