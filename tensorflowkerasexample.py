# -*- coding: utf-8 -*-
"""TensorflowKERASExample

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ALKQzdhnEfufSgwupo_qLZ0qdzQZtTzW
"""

from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from tensorflow.keras.applications.resnet import ResNet50
from scipy import stats as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from PIL import Image
import matplotlib.image as mpimg

df_labels = pd.read_csv('/datasets/faces/labels.csv')
#'/datasets/faces/final_files/'

print(df_labels.head())

print(df_labels.shape)
plt.hist(df_labels['real_age'])

dir = '/datasets/faces/final_files/'

df_sample = df_labels.sample(n=15)
print(df_sample)

for i, row in df_sample.iterrows():
    path = dir+row['file_name']
    #print(image)
    age = row['real_age']
    print(age)
    image = Image.open(path)
    data = asarray(image)
    print(data)
    # summarize shape
    print(data.shape)
    # create Pillow image
    image2 = Image.fromarray(data)
    print(type(image2))
    # summarize image details
    print(image2.mode)
    print(image2.size)
    plt.imshow(image)
    plt.show()
    grey = np.array(Image.open(path).convert('L'))
    plt.imshow(grey, cmap="gray")
    plt.show()
    
    print("[============================]")

"""## Analysis

it looks like the pre-processing done for this set included turning images to center the face evidenced by the gaps on the sides of some images that appear to be turned. My guess is that this will help make the model more accurate as it will be predicting based on a more consistent set of feature patterns, allowing it to capture features sets of the faces of people in different age groups to a better effect.
"""

def load_train(path):
    train_datagen  = ImageDataGenerator(horizontal_flip=True, vertical_flip=True, rescale = 1/255)

    train_datagen_flow  = train_datagen.flow_from_directory(
    path,
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    seed=54321)

    return train_datagen_flow

def load_test(path):
    test_datagen  = ImageDataGenerator(horizontal_flip=True, vertical_flip=True, rescale = 1/255)

    test_datagen_flow  = train_datagen.flow_from_directory(
    path,
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    seed=54321)
    
    return test_datagen_flow

def create_model(input_shape=(150, 150, 3)):
    backbone = ResNet50(input_shape=(150, 150, 3),
                        weights='imagenet', 
                        include_top=False)

    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(12, activation='softmax'))
    optimizer = Adam(lr=0.0001)
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy',
                  metrics=['acc'])

    return model

def train_model(model, train_data, test_data, batch_size=None, epochs=4, steps_per_epoch=None, validation_steps=None):

    if steps_per_epoch is None:
        steps_per_epoch = len(train_data)
    if validation_steps is None:
        validation_steps = len(test_data) 
    model.fit(train_data,
          validation_data=test_data,
          batch_size=batch_size,
          epochs=epochs,
          steps_per_epoch=steps_per_epoch,
         validation_steps=validation_steps,
        verbose=2)

    return model

